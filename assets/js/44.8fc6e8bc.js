(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{479:function(t,a,s){"use strict";s.r(a);var e=s(2),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"相对定位-position-relative"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相对定位-position-relative"}},[t._v("#")]),t._v(" 相对定位  position: relative")]),t._v(" "),a("p",[t._v("让元素相对于自己原来的位置，进行位置移动。")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[t._v("position: relative;\nleft: xx;\ntop: xx;\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--\n1. 相对定位不脱标:\n相对定位的真实位置还在原地，只是显示的时候飘出去其他地方，原地会留下空白。\n\n2. 用途:\n微调元素；\n做绝对定位的参考；子绝父相。\n--\x3e")]),t._v("\n")])])]),a("h3",{attrs:{id:"位置计算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#位置计算"}},[t._v("#")]),t._v(" 位置计算")]),t._v(" "),a("p",[t._v("那条边距离本身对应边的距离。正数向原盒子内偏移，负数向原盒子外偏移。比如left就是看新left边距离原来left边移动距离。")]),t._v(" "),a("h2",{attrs:{id:"绝对定位-position-absolute"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#绝对定位-position-absolute"}},[t._v("#")]),t._v(" 绝对定位 position: absolute")]),t._v(" "),a("p",[t._v("让元素相对于父容器的四边位置移动。")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[t._v("position: absolute;\nleft: xx;\ntop/bottom: xx;\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- \n1. 绝对定位脱标\n1.1 标准文档流的性质，绝对定位以后就不遵守了。\n\t标签不区分行内，块级元素，\n\t不需要display：block就可以设置宽高了，\n\t自己的位置根据设置显示，原来的位置会被后面的元素占据。\n1.2 相当于自己在标准文档流这个默认图层上新创建了一层图层，和标准文档流的唯一联系是相对于父容器的四边的距离。\n\n2. 如果没有参考父容器\n则以当前网页的页面四边，而不是body的边框为参考，做位置移动。\n--\x3e")]),t._v("\n")])])]),a("h3",{attrs:{id:"位置计算-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#位置计算-2"}},[t._v("#")]),t._v(" 位置计算")]),t._v(" "),a("p",[t._v("那条边距离父容器对应边的距离。正数向内偏移，负数向外偏移。")]),t._v(" "),a("p",[t._v("如果不写left等属性，值会是auto，元素位置就会根据周边盒子不同，位置也会不同。")]),t._v(" "),a("h2",{attrs:{id:"子绝父相"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#子绝父相"}},[t._v("#")]),t._v(" 子绝父相")]),t._v(" "),a("p",[t._v("工程上经常会这样做：父亲设置相对定位（但偏移值为0）作参考，然后让儿子绝对定位一定的距离。")]),t._v(" "),a("p",[t._v("找距离最近的有相对定位的父元素为参考。")]),t._v(" "),a("p",[t._v("绝对定位的孩子，不管相对父亲的padding，直接从border内侧就开始定位。")]),t._v(" "),a("h2",{attrs:{id:"固定定位"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#固定定位"}},[t._v("#")]),t._v(" 固定定位")]),t._v(" "),a("p",[t._v("无论页面如何滚动，这个盒子始终都显示，且一直在初始位置不变。参考位置是相对于浏览器页面本身。")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[t._v("position: fixed;\nbottom: 100px;\nright: 30px;\n")])])]),a("h3",{attrs:{id:"位置计算-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#位置计算-3"}},[t._v("#")]),t._v(" 位置计算")]),t._v(" "),a("p",[t._v("距离页面四边的距离。正数向内偏移，负数向外偏移。")]),t._v(" "),a("h2",{attrs:{id:"三种定位位置计算方式一致"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三种定位位置计算方式一致"}},[t._v("#")]),t._v(" 三种定位位置计算方式一致")]),t._v(" "),a("p",[t._v("其实相对、绝对、固定，三种定位方式的偏移位置计算方式都是一致的，只是参考位置不同。")]),t._v(" "),a("p",[t._v("都是那条边相对参考者的对应边移动，正数向内，负数向外。")]),t._v(" "),a("h2",{attrs:{id:"z-index"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#z-index"}},[t._v("#")]),t._v(" z-index")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[t._v("z-index: 1;\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- \n当有多个元素重叠时，该属性决定哪些元素排在上面；越大越上。\n--\x3e")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);