(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{447:function(a,t,e){a.exports=e.p+"assets/img/loginPage.004b910a.png"},513:function(a,t,e){"use strict";e.r(t);var n=e(2),r=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"静态组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态组件"}},[a._v("#")]),a._v(" 静态组件")]),a._v(" "),t("img",{attrs:{src:e(447)}}),a._v(" "),t("h3",{attrs:{id:"el-form-el-form-item-表单组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#el-form-el-form-item-表单组件"}},[a._v("#")]),a._v(" el-form el-form-item 表单组件")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('<el-form ref="loginForm" class="login-form" label-position="left"\n         :model="loginForm" :rules="loginRules" :inline="true">\n\t<el-form-item prop="username">...</el-form-item>\n\t...\n</el-form>\t\n// :model属性用于表单数据的收集；\t:rules属性用于表单数据的规则验证；\t:inline属性用于设置一行可以放置多个表单元素\n// prop属性是在需要表单数据验证时，必须有的属性，与子表单内的v-model字段名称一致。\n')])])]),t("h3",{attrs:{id:"el-input-输入框组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#el-input-输入框组件"}},[a._v("#")]),a._v(" el-input 输入框组件")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('<el-input ref="username" name="username" type="text" placeholder="Username"\n          v-model="loginForm.username" \n          @blur="inputBlur(row)"\t\t\t\t// 输入框失去焦点时触发\n          @keyup.native.enter="inputBlur(row)"\t// 键盘输入enter时触发\n/>\n\n// 作为子标签嵌套在el-form-item里。v-model属性值与收集本表单数据的data保持一致。 \n\n')])])]),t("h3",{attrs:{id:"表单数据收集"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#表单数据收集"}},[a._v("#")]),a._v(" 表单数据收集")]),a._v(" "),t("p",[a._v("1、data的数据名loginForm与el-form:model的属性值一致；")]),a._v(" "),t("p",[a._v("2、loginForm内的子数据名与el-form-item的prop属性值一致。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("data() {\n    return {\n        loginForm: {\n            username: 'admin',\n            password: '111111'\n        }\n}}\n")])])]),t("h3",{attrs:{id:"表单规则验证"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#表单规则验证"}},[a._v("#")]),a._v(" 表单规则验证")]),a._v(" "),t("p",[a._v("1、data的数据名loginRules与el-form:rules的属性值一致；")]),a._v(" "),t("p",[a._v("2、loginRules内的子数据名与el-form-item的prop属性值一致；")]),a._v(" "),t("p",[a._v("3、validator为验证器，定义具体的验证规则。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("data() {\n\t// 验证规则的整体定义：\n    return {\n        loginRules: {\n        \tusername: [{ required: true, trigger: 'blur', validator: validateUsername }],\n        \tpassword: [{ required: true, trigger: 'blur', validator: validatePassword }]\n    },\n// required: true；必须要有输入；\n// trigger：校验的触发事件；blur失焦，change文本改变\n// validator：具体的数据验证规则\n// message：错误时的提示信息\n    \n    // 验证规则的具体定义：\n    // 1、在内部自定义验证规则：value为待验证的数据\n    const validatePassword = (rule, value, callback) => {\n        if (value.length < 6) {\n            // 不符合验证规则，提示错误\n            callback(new Error('The password can not be less than 6 digits'))\n        } else {\n            // 符合，则继续\n            callback()\n        }\n    }\n    // 2、引用别处的验证规则：validUsername为引入的验证函数，其返回结果为true符合/false不符合\n    const validateUsername = (rule, value, callback) => {\n        if (!validUsername(value)) {\n            // 不符合验证规则，提示错误\n            callback(new Error('Please enter the correct user name'))\n        } else {\n            // 符合，则继续\n            callback()\n        }\n    }\n}}\n")])])]),t("p",[a._v("4、表单整体校验是否全部通过后的代码。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("methods: {\n\thandleLogin() {\n\t1、验证通过/失败后的代码为同步代码：\n    // 比如，点击确定登录后，先验证表单是否全部通过验证；\n    this.$refs.loginForm.validate(valid = >{\n        // 符合验证规则\n        if (valid) {\n        ...\n        } \n        else {\n        ...\n        }\n    })\n    \n    2、验证通过/失败后的代码为异步代码：\n    this.$refs.rulesForm.validate(async (success) => {\n        if (success) {\n          // 成功，再进行异步的业务逻辑\n          let result = await this.$API.tradeMark.reqAddOrUpdateTradeMark(this.tradeMarkForm);\n          if (result.code == 200) {\n          ... \n          }\n        }\n        else {\n          ...\n        }\n      })\n}}\n")])])]),t("h2",{attrs:{id:"进入离开组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进入离开组件"}},[a._v("#")]),a._v(" 进入离开组件")]),a._v(" "),t("p",[a._v("1、用户未登录状态下，路由跳转进入；")]),a._v(" "),t("p",[a._v("2、跳转进入dashboard路由组件；")]),a._v(" "),t("h2",{attrs:{id:"数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据"}},[a._v("#")]),a._v(" 数据")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",[a._v("名称")]),a._v(" "),t("th",[a._v("数据类型")]),a._v(" "),t("th",[a._v("所属")]),a._v(" "),t("th",[a._v("数据介绍")])])]),a._v(" "),t("tbody",[t("tr",[t("td",[a._v("loginForm")]),a._v(" "),t("td",[a._v("对象")]),a._v(" "),t("td",[a._v("data")]),a._v(" "),t("td",[a._v("收集表单数据")])]),a._v(" "),t("tr",[t("td",[a._v("loginRules")]),a._v(" "),t("td",[a._v("对象")]),a._v(" "),t("td",[a._v("data")]),a._v(" "),t("td",[a._v("表单数据的验证规则")])]),a._v(" "),t("tr",[t("td",[a._v("validateUsername")]),a._v(" "),t("td",[a._v("函数")]),a._v(" "),t("td",[a._v("data")]),a._v(" "),t("td",[a._v("username的校验规则，仅限data内部的数据使用")])]),a._v(" "),t("tr",[t("td",[a._v("validatePassword")]),a._v(" "),t("td",[a._v("函数")]),a._v(" "),t("td",[a._v("data")]),a._v(" "),t("td",[a._v("password的校验规则，仅限data内部的数据使用（相当于函数内的变量）")])])])]),a._v(" "),t("h2",{attrs:{id:"methods"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#methods"}},[a._v("#")]),a._v(" methods")]),a._v(" "),t("p",[a._v("1、handleLogin 登录业务的处理")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("1、参数：无\n\n2、函数内容：\n2.1、判断表单内的元素是否全部通过验证；\n2.2、如果验证通过，则dispatch触发action:user/login，等待服务器返回结果；如果结果成功，则跳转向dashboard路由组件；\n2.3、失败则提示失败原因；\n")])])]),t("h2",{attrs:{id:"api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[a._v("#")]),a._v(" API")]),a._v(" "),t("p",[a._v("1、用户登录")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('地址：/admin/acl/index/login   请求方式：post    需要带参数data\nexport function login(data) {\n  return request({ url: "/admin/acl/index/login", method: "post", data });\n}\n')])])]),t("p",[a._v("2、用户退出登录")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('地址：/admin/acl/index/logout   请求方式：post    无参数\nexport function logout() {\n  return request({ url: "/admin/acl/index/logout", method: "post" });\n')])])]),t("h2",{attrs:{id:"vuex"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vuex"}},[a._v("#")]),a._v(" vuex")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("vuex-user：\n1、actions\n1.1、login\n调用API-用户登录；服务器返回请求成功，则调用mutations-SET_TOKEN，并在本地执行SET_TOKEN操作。\n1.2、logout\n调用API-用户退出登录；服务器返回请求成功，则调用mutations-RESET_STATE，并在本地执行removeToken操作。\n \n2、mutations\n2.1、SET_TOKEN\n将服务器返回的token数据保存到state中。\n2.1、RESET_STATE\n将state的数据全部置为默认数据。\n\n3、state\ntoken: '' \t\t\n")])])]),t("h1",{attrs:{id:"功能点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#功能点"}},[a._v("#")]),a._v(" 功能点")]),a._v(" "),t("p",[a._v("1、用户登录")]),a._v(" "),t("p",[a._v("用户在登录表单内输入数据，并点击登录按钮，调用handleLogin方法；然后组件将表单数据进行检验；检验通过后，组件触发vuex的action:user/login；vuex调用用户登录的API，向服务器发送请求；服务器返回成功则跳转至dashboard路由组件。")]),a._v(" "),t("p",[a._v("2、用户退出登录")]),a._v(" "),t("p",[a._v("用户点击退出登录按钮，调用logout方法；然后组件触发vuex的action:user/logout；vuex调用退出登录的API，向服务器发送请求；服务器返回成功则跳转至Login登录路由组件。")])])}),[],!1,null,null,null);t.default=r.exports}}]);