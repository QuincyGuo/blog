(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{448:function(t,a,e){t.exports=e.p+"assets/img/brandingPage.c4af5884.png"},449:function(t,a,e){t.exports=e.p+"assets/img/brandingPage-addBranding.db2242f5.png"},514:function(t,a,e){"use strict";e.r(a);var s=e(2),n=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"静态组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态组件"}},[t._v("#")]),t._v(" 静态组件")]),t._v(" "),a("img",{attrs:{src:e(448)}}),t._v(" "),a("img",{attrs:{src:e(449)}}),t._v(" "),a("h3",{attrs:{id:"el-button-按钮组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#el-button-按钮组件"}},[t._v("#")]),t._v(" el-button 按钮组件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<el-button type="primary" icon="el-icon-plus" style="margin:10px 0px" \n\t\t   @click="addTradeMark"\n\t\t   :disabled="!category3Id">添加</el-button>\n\n// type是按钮类型，不同类型的按钮有不同的样式；icon="el-icon-plus"是按钮上的图标，el-icon是element-ui的图标库       \n')])])]),a("h3",{attrs:{id:"el-table-el-table-column-表格组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#el-table-el-table-column-表格组件"}},[t._v("#")]),t._v(" el-table el-table-column 表格组件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<el-table :data=list border>\n    <el-table-column label="序号" type="index" width=\'50px\' align="center"> </el-table-column>\n    <el-table-column prop="tmName" label="品牌名称" width=\'width\'> </el-table-column>\n</el-table>\n\ndata() {\n    return {\n        list: [\n        \ttmName:\'\',\n        \tlogoUrl:\'\',\n        ],\n}}\n\n// :data属性用于表格数据的收集；其属性值一般是数组；表格是竖向，按照一列一列来完成数据分配的；\t\tborder：表格边框\n\n// 序号列：label="序号" type="index"，有这两个字段即可完成序号列的自动填充\n// 数据列：prop="tmName"，tmName是data:list中的子属性，有这个字段，就会自动把list数组中每一项的tmName属性，按数组顺序显示到这列中。\n// 选择列：每行的第一列是多选控件，handleSelectionChange是选择发生变化时的回调函数。\n\t<el-table @selection-change="handleSelectionChange">\n\t\t<el-table-column type="selection" width="60px"></el-table-column>\n\thandleSelectionChange (val) {\n       //参数val 用户选中的行的数据组成的数组[{行一},{行二}]\n       this.selectedImgList = val;\n    },\n// width=\'width\'，width属性可以分配固定的数值宽度，也可以是width属性值，代表均分；\tlabel是每列的标题\n')])])]),a("h3",{attrs:{id:"表格单元格内展示非文本数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表格单元格内展示非文本数据"}},[t._v("#")]),t._v(" 表格单元格内展示非文本数据")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<el-table :data=list border>\n    <el-table-column label="品牌logo" width=\'width\'>\n        <template slot-scope="{row,$index}">\n            <img :src="row.logoUrl" style="width:40px;height:40px;">\n            <el-button type="warning" icon="el-icon-edit" size="mini"\n                       @click="updateTradeMark(row)">修改</el-button>\n        </template>\n    </el-table-column>\n</el-table>\n')])])]),a("p",[t._v("这里使用了作用域插槽。"),a("strong",[t._v("作用域插槽的原理一句话就是，子留下插槽，由父组件书写结构外观并传递过去显示。")]),t._v("\n在这里可见的代码都是父组件的代码；而子组件是单元格，是由element-ui封装好的，在这里见不到。所以，这里书写的img是父组件要传递给子组件单元格里面显示的。")]),t._v(" "),a("p",[a("strong",[t._v("row应该也是单元格子组件封装好传过来的数据。其内容是data:list中当前行的整行数据。row也可以代表本行数据，作为调用组件内函数的参数")])]),t._v(" "),a("p",[a("strong",[t._v("$index同理，其内容是data:list中当前行的顺序，从0开始计算。")])]),t._v(" "),a("h3",{attrs:{id:"el-pagination-分页器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#el-pagination-分页器"}},[t._v("#")]),t._v(" el-pagination 分页器")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<el-pagination :total="total"\n               :current-page="currentPage"\n               :page-size="pageDataCountNow"\n               :page-sizes="pageDataCount"\n               @current-change=""\n               @size-change=""\n               layout="prev, pager, next, jumper, ->, sizes, total"\n               style="margin-top:20px;text-align:center;">\n</el-pagination>\n\ndata() {\n    return {\n        currentPage: 1,   // 分页器当前页\n        pageDataCountNow: 3,  // 当前每页要展示的数据个数\n        pageDataCount: [3, 5, 10],  // 当前每页要展示的数据个数列表\n        total: 0,   // 总共的数据个数\n}}\n\n// :total、:current-page、:page-size、:page-sizes 都是分页器需要的数据。分别代表数据总数、目前所在页数、当前每页展示多少条数据、每页展示数据条数的切换数组。\n// @current-change是用户切换页码时的触发函数，需要为其书写回调函数。\n// @size-change是用户切换每页展示数据条数时的触发函数，需要为其书写回调函数。\n// layout是分页器内各个子控件的排列顺序。如上面代码，排列顺序就是上一页、页码、下一页、页码跳转、每页展示条数、页码总数。\n')])])]),a("h3",{attrs:{id:"el-upload-上传组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#el-upload-上传组件"}},[t._v("#")]),t._v(" el-upload 上传组件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('1、上传组件的定义：\n<el-upload action="/dev-api/admin/product/fileUpload"\n           :show-file-list="false"\n           :on-success=""\n           :before-upload="">\n    // 下面两句是：如果上传成功，data里就会有图片，就在上传按钮处显示图片；否则就显示一个上传图标\n\t<img v-if="tradeMarkForm.logoUrl" :src="tradeMarkForm.logoUrl">\n    <i v-else class="el-icon-plus avatar-uploader-icon"></i>\n    <div slot="tip" class="el-upload__tip">只能上传jpg文件，且不超过500kb</div>\n</el-upload>\n\n// action：要上传的网站路径\n   :show-file-list：是否可上传多张\n   :on-success：图片上传到服务器成功，执行一次该触发函数\n   :before-upload：上传前的触发函数\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("2、上传前的函数：判断上传文件的文件类型和大小\nbeforeAvatarUpload (file) {\n    const isJPG = file.type === 'image/jpeg';\n    const isLt2M = file.size / 1024 / 1024 < 2;\n    if (!isJPG) {\n    \tthis.$message.error('上传头像图片只能是 JPG 格式!');\n    }\n    if (!isLt2M) {\n    \tthis.$message.error('上传头像图片大小不能超过 2MB!');\n    }\n    return isJPG && isLt2M;\n},\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("3、上传成功后的函数：获取文件上传后，在服务器的路径\nhandleAvatarSuccess (res, file) {\n\t// 实际上要看后端具体是如何定义的：上传成功后，服务器会给前端返回什么数据\n\t// 这处代码，res.data 就是服务器返回的文件上传后在服务器的路径。\n    this.tradeMarkForm.logoUrl = res.data;\n},\n")])])]),a("h3",{attrs:{id:"el-upload-上传组件-可上传多个文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#el-upload-上传组件-可上传多个文件"}},[t._v("#")]),t._v(" el-upload 上传组件-可上传多个文件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('1、上传组件的定义：\n<el-upload action="/dev-api/admin/product/fileUpload"\n           list-type="picture-card"\n           :on-preview="handlePictureCardPreview"\n           :on-remove="handleRemove"\n           :on-success="handlerSuccess"\n           :file-list="spuImageList">\n\t<i class="el-icon-plus"></i>\n</el-upload>\n<el-dialog :visible.sync="dialogVisible">\n\t<img width="70%" :src="dialogImageUrl">\n</el-dialog>\n\n// action：要上传的网站路径\t\tlist-type：文件列表的类型（text/picture/picture-card）\n// on-preview：\t点击文件列表中已上传的文件时的触发函数\n// on-remove：\t文件列表移除文件时的触发函数\n// on-success：\t图片上传到服务器成功，执行一次该触发函数\n// file-list：\t已上传的文件列表的相关数据；是一个对象数组。\n\n// dialogVisible：组件内定义的数据，控制预览图片的对话框的显示与否\n// dialogImageUrl：组件内定义的数据，要预览查看的文件地址\n\n// :file-list="spuImageList"，数据的定义要求：\nspuImageList首先定义为空；\n上传成功后，this.spuImageList = fileList;这时，spuImageList会有上传的服务器返回的文件列表数据，包括name、url、response、size、status等；\n传递给服务器时，如果服务器需要的是其他名称的属性（比如imgUrl），则还需要给spuImageList内的每个对象再添加其他属性。\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("2、预览图片的回调函数\nhandlePictureCardPreview (file) {\n    this.dialogImageUrl = file.url;\n    this.dialogVisible = true;\n},\n\n3、删除图片的回调函数\nhandleRemove (file, fileList) {\n    // file参数：代表的是删除的那个图片  filelist：照片墙删除某一张图片以后，剩余的其他的图片\n    this.spuImageList = fileList;\n},\n\n4、添加图片的回调函数\nhandlerSuccess (response, file, fileList) {\n    // response：上传成功后服务器返回的信息，包括code，data(图片在服务器的路径)，message等    \n    // file参数：上传成功的那个图片    \n    // filelist：照片墙上传一张图片以后，所有图片的相关数据\n    this.spuImageList = fileList;\n},\n")])])]),a("h3",{attrs:{id:"messagebox-消息弹框"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#messagebox-消息弹框"}},[t._v("#")]),t._v(" messageBox 消息弹框")]),t._v(" "),a("p",[t._v("比如，用户点击删除时，弹出消息框提示是否删除，点击确定/取消，会导向不同的操作。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("deleteTradeMark (row) {\n    this.$confirm(`是否确定删除【${row.tmName}】`, '提示', {\n    \tconfirmButtonText: '确定',\n    \tcancelButtonText: '取消',\n    \ttype: 'warning'\n    \t// row.tmName 是待删除的数据名；\t\t'提示'：是消息框标题；\t\ttype：消息框文本前的图标\n    }).then(async () => {\n        // 点击确定按钮后的代码：有异步代码\n        let result = await this.$API.tradeMark.reqDeleteTradeMark(row.id);\n        if (result.code == 200) {\n        ...\n        }\n    }).catch(() => {\n    \t// 点击取消按钮时触发\n    \t...\n    });\n}\n")])])]),a("h2",{attrs:{id:"进入离开组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进入离开组件"}},[t._v("#")]),t._v(" 进入离开组件")]),t._v(" "),a("p",[t._v("切换页面左侧的侧边栏，实现对路由的切换。")]),t._v(" "),a("h2",{attrs:{id:"生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),a("p",[t._v("1、mounted ()")]),t._v(" "),a("p",[t._v("调用getPageList方法；组件向服务器发送”获取品牌列表“的网络请求，如果服务器返回的result正常，则将返回的数据保存到组件的data中，以供后续使用。")]),t._v(" "),a("h2",{attrs:{id:"数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据"}},[t._v("#")]),t._v(" 数据")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("名称")]),t._v(" "),a("th",[t._v("数据类型")]),t._v(" "),a("th",[t._v("所属")]),t._v(" "),a("th",[t._v("数据介绍")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("currentPage")]),t._v(" "),a("td",[t._v("number")]),t._v(" "),a("td",[t._v("data")]),t._v(" "),a("td",[t._v("分页器-当前页")])]),t._v(" "),a("tr",[a("td",[t._v("total")]),t._v(" "),a("td",[t._v("number")]),t._v(" "),a("td",[t._v("data")]),t._v(" "),a("td",[t._v("分页器-总共的数据个数")])]),t._v(" "),a("tr",[a("td",[t._v("page-size")]),t._v(" "),a("td",[t._v("number")]),t._v(" "),a("td",[t._v("data")]),t._v(" "),a("td",[t._v("分页器-当前每页展示多少条数据")])]),t._v(" "),a("tr",[a("td",[t._v("page-sizes")]),t._v(" "),a("td",[t._v("数组")]),t._v(" "),a("td",[t._v("data")]),t._v(" "),a("td",[t._v("分页器-每页展示数据条数的切换数组")])]),t._v(" "),a("tr",[a("td",[t._v("list")]),t._v(" "),a("td",[t._v("数组")]),t._v(" "),a("td",[t._v("data")]),t._v(" "),a("td",[t._v("当前页要展示的数据列表")])]),t._v(" "),a("tr",[a("td",[t._v("dialogFormVisible")]),t._v(" "),a("td",[t._v("Boolean")]),t._v(" "),a("td",[t._v("data")]),t._v(" "),a("td",[t._v("添加/修改品牌的对话框的显示隐藏")])]),t._v(" "),a("tr",[a("td",[t._v("tradeMarkForm")]),t._v(" "),a("td",[t._v("对象")]),t._v(" "),a("td",[t._v("data")]),t._v(" "),a("td",[t._v("增加/修改的品牌信息")])]),t._v(" "),a("tr",[a("td",[t._v("rules")]),t._v(" "),a("td",[t._v("对象")]),t._v(" "),a("td",[t._v("data")]),t._v(" "),a("td",[t._v("品牌信息数据的验证规则")])]),t._v(" "),a("tr",[a("td",[t._v("validatePass")]),t._v(" "),a("td",[t._v("函数")]),t._v(" "),a("td",[t._v("data")]),t._v(" "),a("td",[t._v("品牌信息的校验规则，仅限data内部的数据rules使用")])])])]),t._v(" "),a("h2",{attrs:{id:"api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[t._v("#")]),t._v(" API")]),t._v(" "),a("p",[t._v("1、获取品牌列表数据")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('地址：/admin/product/baseTrademark/{page}/{limit}\t请求方式：get\t参数：page第几页\tlimit每页数据展示个数\nexport const reqTradeMarkList = (page, limit) =>\n\trequest({ url: `/admin/product/baseTrademark/${page}/${limit}`, method: "get" });\n')])])]),a("p",[t._v("2、新增/修改品牌数据")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('1、新增\n地址：/admin/product/baseTrademark/save\t\t请求方式：post\t\t参数：data{tmName品牌名称，logoUrl品牌logo图片路径}\n2、修改\n地址：/admin/product/baseTrademark/update\t\t请求方式：put\t\t参数：data{id品牌id，tmName品牌名称，logoUrl品牌logo图片路径}\n两个API的区别：新增品牌传给服务器的参数没有id，所以将两个请求合一，通过参数有无id进行区分。\n\nexport const reqAddOrUpdateTradeMark = (tradeMark) => {\n\tif (tradeMark.id) {\n    \treturn request({ url: `/admin/product/baseTrademark/update`, method: "put", data: tradeMark });\n    } \n\telse {\n    \treturn request({ url: `/admin/product/baseTrademark/save`, method: "post", data: tradeMark });\n    }\n};\n')])])]),a("p",[t._v("3、删除品牌数据")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('地址：/admin/product/baseTrademark/remove/{id} \t请求方式：delete\t\t参数：id品牌id\nexport const reqDeleteTradeMark = (id) =>\n  request({ url: `/admin/product/baseTrademark/remove/${id}`, method: "delete" });\n')])])]),a("h2",{attrs:{id:"methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#methods"}},[t._v("#")]),t._v(" methods")]),t._v(" "),a("p",[t._v("1、getPageList()\t获取品牌列表数据")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1、参数：无\n\n2、函数内容：\n2.1、获取到当前页码等数据，调用API-获取品牌列表；等待服务器返回结果；如果结果成功，将服务器返回的品牌列表数据保存到组件data中；\n2.2、失败则提示失败原因；\n")])])]),a("p",[t._v("2、addTradeMark()\t新增品牌")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1、参数：无\n\n2、函数内容：\n2.1、显示新增/修改品牌对话框；\n2.2、将收集品牌信息的data:tradeMarkForm置为空，等待用户输入。\n")])])]),a("p",[t._v("3、updateTradeMark(row)\t修改品牌")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1、参数：row 待修改的品牌信息数据\n\n2、函数内容：\n2.1、显示新增/修改品牌对话框；\n2.2、将 row 赋给 data:tradeMarkForm，等待用户修改。\n")])])]),a("p",[t._v("4、addOrUpdateTradeMark()\t确定新增/修改")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1、参数：无\n\n2、函数内容：\n2.1、判断表单内的元素是否全部通过验证；\n2.2、如果验证通过，则调用API-新增/修改品牌数据，等待服务器返回结果；如果返回结果成功，则弹出消息提示，关闭对话框，并切换页码至合适页码（修改：当前页；新增：最后一页）；\n2.3、如果返回结果失败，则提示失败原因；\n")])])]),a("p",[t._v("5、deleteTradeMark(row)\t删除品牌")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1、参数：row 待删除的品牌信息数据\n\n2、函数内容：\n2.1、弹出消息框提示是否确定删除；\n2.2、确定删除，则调用API-删除品牌数据，等待服务器返回结果；如果返回结果成功，则弹出消息提示，并切换页码至合适页码（判断本页是否还有数据，有则停留本页，没有则切换至上一页）；\n2.3、取消删除，则弹出消息提示。\n")])])]),a("p",[t._v("6、 beforeAvatarUpload (file)\t上传到组件前的函数")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1、参数：file 待上传的文件\n\n2、函数内容：\n2.1、判断待上传文件的类型和大小；\n2.2、不满足条件，则弹出消息提示，并return false。\n2.3、满足条件，不做干涉，upLoad组件会自动将文件上传到设置好的路径。\n")])])]),a("p",[t._v("7、handleAvatarSuccess (res, file)\t上传到组件成功的函数")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1、参数：res, file 上传成功后，服务器返回给前端的数据；实际上要看后端具体是如何定义\n\n2、函数内容：\n2.1、获取服务器返回的数据，并将其中的上传成功后的文件的路径，赋值给data:tradeMarkForm，以在页面上显示。\n")])])]),a("p",[t._v("8、handlerCurrentChange (page)\t切换页码")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1、参数：page 切换后新的页码\n\n2、函数内容：\n2.1、将切换页码后新的页码page赋值给data:currentPage；\n2.2、调用methods:getPageList()，获取本页的品牌列表数据\n")])])]),a("p",[t._v("9、handleSizeChange(count)\t切换每页列表数据的个数")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1、参数：count 切换后新的每页数据的个数\n\n2、函数内容：\n2.1、将切换页码后新的每页数据的个数count赋值给data:pageDataCountNow；\n2.2、调用methods:getPageList()，获取本页的品牌列表数据\n")])])]),a("h2",{attrs:{id:"功能点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#功能点"}},[t._v("#")]),t._v(" 功能点")]),t._v(" "),a("p",[t._v("1、页面数据动态展示")]),t._v(" "),a("p",[t._v("组件在mounted阶段，获取到初始的当前页码等数据；之后调用获取品牌列表数据的API，向服务器发送请求；服务器返回成功则将返回的数据保存到组件data中；页面在展示时，使用相应的属性即可。")]),t._v(" "),a("p",[t._v("用户使用阶段，切换页码、切换每页数据个数等操作，组件获取到当前页码等数据；...（与上面一致）。")]),t._v(" "),a("p",[t._v("2、新增品牌数据")]),t._v(" "),a("p",[t._v("用户点击新增按钮，弹出新增品牌的对话框；")]),t._v(" "),a("p",[t._v("用户在对话框进行输入数据、上传文件等操作，用户操作的同时组件对数据进行验证，以确保新增数据的合法性；")]),t._v(" "),a("p",[t._v("用户点击确定新增，组件判断表单所有的验证是否全部通过；全部通过则调用新增品牌数据的API，向服务器发送请求；服务器返回成功则弹出消息框提示，关闭对话框并切换至合适的页码。")]),t._v(" "),a("p",[t._v("3、修改品牌数据")]),t._v(" "),a("p",[t._v("用户点击修改按钮，弹出修改品牌的对话框；并将待修改的数据显示到表单中；")]),t._v(" "),a("p",[t._v("用户在对话框上的操作和新增数据一致，操作的同时进行验证；")]),t._v(" "),a("p",[t._v("用户点击确定修改，验证全部通过后，调用修改品牌数据的API，向服务器发送请求；服务器返回成功则弹出消息框提示，关闭对话框并切换至合适的页码。")]),t._v(" "),a("p",[t._v("4、删除品牌数据")]),t._v(" "),a("p",[t._v("用户点击删除按钮，弹出是否确定删除的消息框；确定删除后，则调用删除品牌数据的API，向服务器发送请求；服务器返回成功则弹出消息框提示，切换至合适的页码。")])])}),[],!1,null,null,null);a.default=n.exports}}]);